@using System.Security.Claims;

@model Testing_System.Models.User.ProfileModel
@{
    ViewData["Title"] = "Profile";
}
<div>
    <h1 class="display-4" style="font-weight: 300; margin-left: 10px">Profile</h1>
</div>

<div class="container">
    <div class="main-body">

        <div class="row gutters-sm">
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-column align-items-center text-center">
                            @{
                                String userAvatar = Model.Avatar;
                                if (String.IsNullOrEmpty(userAvatar)) userAvatar = "no-avatar.png";
                            }
                            <img src="~/avatars/@(userAvatar)" alt="no avatar" class="rounded-circle" width="150">
                            <div class="mt-3">
                                <h4 id="name">
                                    @(Model.Name)
                                </h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Name</h6>
                            </div>
                            <div class="col-sm-8 text-secondary">
                                <span id="realname" class="p-2">@(Model.Name) </span>

                            </div>

                        </div>
                        <hr>
                        <div class="row">

                            <div class="col-sm-3">
                                <h6 class="mb-0">Surname</h6>
                            </div>
                            <div class="col-sm-8 text-secondary">
                                <span id="surname" class="p-2"> @(Model.Surname)</span>

                            </div>
                        </div>
                        <hr>

                        <div class="row">
                            <div class="col-sm-3">
                                <h6 class="mb-0">
                                    Email
                                </h6>
                            </div>
                            <div class="col-sm-8 text-secondary">
                                <span id="email" class="p-2">@(Model.Email)</span>
                            </div>

                        </div>

                    </div>

                </div>

            </div>
        </div>

    </div>
</div>
@if (Model.UserStatus == "teacher")
{
    <div class="container">
        <div class="row">

            @foreach (var Test in Model.Tests)
            {
                @Html.DisplayFor(m => Test, "TestEditCard")
            }
        </div>
    </div>
}

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-controller="Home" asp-action="DeleteTest" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Test delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <label for="user-option">Are you sure to delete this test?</label><br />
                    <input type="hidden" id="test">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" id="delete-button">Delete</button>
                </div>

            </form>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const deletesButtons = document.querySelectorAll("[data]");
        for (let deleteButton of deletesButtons) {
            deleteButton.addEventListener("click", deleteClick);
        }
        const delButton = document.getElementById("delete-button");
        if (delButton) {
            delButton.addEventListener("click", deleteButtonClick);
        }
    });

    function deleteClick(e) {
        document.getElementById("test").value = e.target.getAttribute("data");
        console.log(document.getElementById("test").value);
    }

    function deleteButtonClick(e) {
        const testIdInput = document.getElementById("test");
        if (!testIdInput) throw "testIdInput not found";
        const testId = testIdInput.value;

        window.fetch("/Home/DeleteTest", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            body: `testId=${testId}`
        })
            .then(r => r.text())
            .then(t => {
                console.log(t);
                if (t === "OK") {
                    window.location.reload();
                }
                else {
                    console.log("Something went wrong");
                }
            });
    }
</script>